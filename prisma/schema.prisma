generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================
// Enums
// ========================
enum AuditActionType {
  // Auth Events
  USER_SIGNED_UP
  USER_SIGNED_IN
  USER_LOGGED_OUT
  USER_PASSWORD_RESET
  // Role Events
  ROLE_ASSIGNED
  ROLE_MODIFIED
  ROLE_REVOKED
  ROLE_CREATED
  ROLE_DELETED
  //Permission Events
  PERMISSION_ASSIGNED
  PERMISSION_REVOKED
  // Requisition Events
  REQUISITION_SUBMITTED
   REQUISITION_DEPT_APPROVED
  REQUISITION_DEPT_DECLINED
  REQUISITION_ITD_APPROVED
  REQUISITION_ITD_DECLINED
  REQUISITION_PROCESSED
  // Inventory Events
  INVENTORY_CREATED
  INVENTORY_UPDATED
  INVENTORY_STATUS_CHANGED
  INVENTORY_DISPOSED
  // Maintenance Events
  MAINTENANCE_TICKET_CREATED
  MAINTENANCE_TICKET_UPDATED
  MAINTENANCE_TICKET_RESOLVED
  // Stock Events
  STOCK_RECEIVED
  STOCK_ISSUED
  STOCK_ADJUSTED
  STOCK_MODIFIED
  STOCK_DELETED
  // IT Item Events
  IT_ITEM_CREATED
  IT_ITEM_MODIFIED
  IT_ITEM_DELETED
  // Supplier Events
  SUPPLIER_CREATED
  SUPPLIER_UPDATED
  SUPPLIER_DELETED
  // System Events
  USER_DELETED
  USER_RESTORED
  USER_UPDATED
  USER_STATUS_CHANGED
  ITEM_DELETED
}

enum DeviceType {
  LAPTOP
  PRINTER
  UPS
  DESKTOP
  OTHER
}

enum ItemClass {
  FIXED_ASSET
  CONSUMABLE
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
}

enum RequisitionStatus {
  PENDING_DEPT_APPROVAL
  PENDING_ITD_APPROVAL
  DEPT_APPROVED
  ITD_APPROVED
  DEPT_DECLINED
  ITD_DECLINED
  PROCESSED
}

enum InventoryStatus {
  ACTIVE
  INACTIVE
  NON_FUNCTIONAL
  OBSOLETE
  DISPOSED
}

enum IssueType {
  HARDWARE
  SOFTWARE
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

// ========================
// Core Models
// ========================

model Department {
  id             String  @id @default(uuid())
  name           String  @unique
  location       String?
  deptApproverId String? @unique
  deptApprover   User?   @relation("DepartmentApprover", fields: [deptApproverId], references: [id])

  units Unit[] @relation("DepartmentUnits")
  users User[] @relation("DepartmentUsers")

  inventories        Inventory[]         @relation("DepartmentInventory")
  requisitions       Requisition[]       @relation("DepartmentRequisitions")
  maintenanceTickets MaintenanceTicket[] @relation("DepartmentMaintenanceTickets")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("departments")
}

model Unit {
  id           String     @id @default(uuid())
  name         String     @unique
  departmentId String
  department   Department @relation("DepartmentUnits", fields: [departmentId], references: [id])

  users              User[]              @relation("UserUnit")
  inventories        Inventory[]         @relation("UnitInventory")
  requisitions       Requisition[]       @relation("UnitRequisitions")
  maintenanceTickets MaintenanceTicket[] @relation("UnitMaintenanceTickets")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model User {
  id           String      @id @default(uuid())
  staffId       String   @unique
  email        String      @unique
  password      String
  mustResetPassword Boolean @default(true)
  name         String?
  departmentId String?
  department   Department? @relation("DepartmentUsers", fields: [departmentId], references: [id])
  unitId       String?
  unit         Unit?       @relation("UserUnit", fields: [unitId], references: [id])
  roomNo       String?
   securityQuestion   String?     
  securityAnswerHash String?    
  deletedAt    DateTime?
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relationships
  roles                      UserRole[]          @relation("UserRoles")
  performedAudits            AuditLog[]          @relation("PerformedBy")
  affectedAudits             AuditLog[]          @relation("AffectedUser")
  requisitions               Requisition[]       @relation("UserRequisitions")
  deptApproverFor            Department?         @relation("DepartmentApprover")
  deptApprovals              Requisition[]       @relation("DeptApprover")
  itdApprovals               Requisition[]       @relation("ITDApprover")
  stockReceived              StockReceived[]     @relation("UserStockReceived")
  stockIssued                StockIssued[]       @relation("UserStockIssued")
  maintenanceTicketsReceived MaintenanceTicket[] @relation("TechnicianReceived")
  maintenanceTicketsReturned MaintenanceTicket[] @relation("TechnicianReturned")
  maintenanceTicketsAudited  MaintenanceTicket[] @relation("AuditedBy")
  maintenanceTickets         MaintenanceTicket[] @relation("UserMaintenanceTickets")

  // Back-relations for Inventory
  inventories               Inventory[] @relation("UserInventory")
  markedObsoleteInventories Inventory[] @relation("MarkedObsoleteBy")
  disposedInventories       Inventory[] @relation("DisposedBy")

  issuedRequisitions Requisition[] @relation("IssuedRequisitions")

  @@map("users")
}

// ========================
// Enhanced Audit Logging
// ========================
model AuditLog {
  id             String          @id @default(uuid())
  actionType     AuditActionType
  performedBy    User?           @relation("PerformedBy", fields: [performedById], references: [id])
  performedById  String
  affectedUser   User?           @relation("AffectedUser", fields: [affectedUserId], references: [id])
  affectedUserId String?
  entityType     String?
  entityId       String?
  oldState       Json?
  newState       Json?
  ipAddress      String?
  userAgent      String?
  details        Json?
  createdAt      DateTime        @default(now())
  deletedAt      DateTime?      

  @@index([actionType])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ========================
// Role & Permission System
// ========================
model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  users       UserRole[]
  permissions RolePermission[]
  createdAt   DateTime?         @default(now())
  updatedAt   DateTime?         @updatedAt
  deletedAt   DateTime?       

  @@map("roles")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  deletedAt DateTime? 

  // Relationships
  user User @relation("UserRoles", fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id          String           @id @default(uuid())
  resource        String           
  actions String[]             
  roles       RolePermission[]
  deletedAt   DateTime?

  @@unique([resource])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// ========================
// Inventory Enhancements
// ========================

model Inventory {
  id              String        @id @default(uuid())
  assetId         String        @unique
  itItemId        String
  itItem          ITItem        @relation("InventoryITItem", fields: [itItemId], references: [id])
  stockReceivedId String
  stockReceived   StockReceived @relation("InventoryStockReceived", fields: [stockReceivedId], references: [id])
  userId          String
  user            User          @relation("UserInventory", fields: [userId], references: [id])
  departmentId    String
  department      Department    @relation("DepartmentInventory", fields: [departmentId], references: [id])
  unitId          String?
  unit            Unit?         @relation("UnitInventory", fields: [unitId], references: [id])
  lpoReference    String?
  supplierId      String?
  supplier        Supplier?     @relation("SupplierInventory", fields: [supplierId], references: [id])

  // Inventory Details
  warrantyPeriod  Int 
  purchaseDate    DateTime
  status          InventoryStatus
  statusChangedAt DateTime?

  // Obsolescence and Disposal
  markedObsoleteBy   User?     @relation("MarkedObsoleteBy", fields: [markedObsoleteById], references: [id])
  markedObsoleteById String?
  disposedBy         User?     @relation("DisposedBy", fields: [disposedById], references: [id])
  disposedById       String?
  disposalDate       DateTime?

  // Additional Information
  remarks   String? 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Device-specific relationships
  desktopDetails DesktopDetails?
  printerDetails PrinterDetails?
  upsDetails     UPSDetails?
  laptopDetails  LaptopDetails?
  otherDetails   OtherDetails?

  maintenanceTickets MaintenanceTicket[] @relation("InventoryMaintenanceTicket")

  // Indexes
  @@index([itItemId])
  @@index([status])
  @@map("inventory")
}

// Device-specific models (Desktop-specific fields)
model DesktopDetails {
  id          String    @id @default(uuid())
  inventoryId String    @unique
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  // Desktop Specifications
  desktopBrand                String?
  desktopModel                String?
  desktopSerialNumber         String?
  desktopMonitorBrand         String?
  desktopMonitorModel         String?
  desktopMonitorSerialNumber  String?
  desktopMacAddress           String?
  desktopProcessorType        String?
  desktopMemorySize           String? 
  desktopStorageDriveType     String? 
  desktopStorageDriveSize     String? 
  desktopOperatingSystem      String?
  desktopEndpointSecurity     Boolean?
  desktopSpiceworksMonitoring Boolean?
  deletedAt                   DateTime?

  @@map("desktop_details")
}

// Device-specific models (Laptop-specific fields)
model LaptopDetails {
  id          String    @id @default(uuid())
  inventoryId String    @unique
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  // Laptop Specifications
  laptopBrand                String?
  laptopModel                String?
  laptopSerialNumber         String?
  laptopMacAddress           String?
  laptopProcessorType        String?
  laptopMemorySize           String? 
  laptopStorageDriveType     String? 
  laptopStorageDriveSize     String? 
  laptopOperatingSystem      String?
  laptopEndpointSecurity     Boolean?
  laptopSpiceworksMonitoring Boolean?
  deletedAt                  DateTime?

  @@map("laptop_details")
}

// Device-specific models (Printer-specific fields)
model PrinterDetails {
  id          String    @id @default(uuid())
  inventoryId String    @unique
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  // Printer Specifications
  printerBrand        String?
  printerModel        String?
  printerSerialNumber String?
  printerMacAddress   String?
  printerTonerNumber  String?
  deletedAt           DateTime?

  @@map("printer_details")
}

// Device-specific models (UPS-specific fields)
model UPSDetails {
  id          String    @id @default(uuid())
  inventoryId String    @unique
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  // UPS Specifications
  upsBrand        String?
  upsModel        String?
  upsSerialNumber String?
  deletedAt       DateTime?

  @@map("ups_details")
}

// Device-specific models (Other-specific fields)
model OtherDetails {
  id          String    @id @default(uuid())
  inventoryId String?    @unique
  inventory   Inventory? @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  // Other Device Specifications
  deviceType        String? 
  otherBrand        String?
  otherModel        String?
  otherSerialNumber String?
  otherMacAddress   String?
  deletedAt         DateTime?

  @@map("other_details")
}

// ========================
// Soft Delete & Cascading
// ========================
model Supplier {
  id             String    @id @default(uuid())
  supplierID     String    @unique 
  name           String
  contactDetails String?
  lpoReference   String 
  lpoDate        DateTime
  voucherNumber  String 
  remarks        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  inventories   Inventory[]     @relation("SupplierInventory")
  itItems       ITItem[]
  stockReceived StockReceived[] @relation("SupplierStockReceived")

  @@index([lpoReference])
  @@index([voucherNumber])
  @@map("suppliers")
}

model ITItem {
  id              String     @id @default(uuid())
  itemID          String     @unique 
  deviceType      DeviceType
  itemClass       ItemClass
  brand           String
  model           String
  defaultWarranty Int? 
  supplierId      String?
  supplier        Supplier?  @relation(fields: [supplierId], references: [id])

  validationRules Json? 
  specifications  Json? 
  requisitions    Requisition[]
  inventories     Inventory[]   @relation("InventoryITItem")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  stockReceived StockReceived[] @relation("ITItemStockReceived")
  stock         Stock?          @relation("ITItemStock")
  stockIssued   StockIssued[]   @relation("ITItemStockIssued")

  @@index([deviceType])
  @@map("it_items")
}

model Requisition {
  id                 String            @id @default(uuid())
  requisitionID      String            @unique // e.g., "REQ-2023-001"
  staffId            String
  staff              User              @relation("UserRequisitions", fields: [staffId], references: [id],onDelete: Cascade, map: "requisition_staff_fkey")
  itItemId           String?
  itItem             ITItem?           @relation(fields: [itItemId], references: [id], map: "requisition_itItem_fkey")
  itemDescription    String
  quantity           Int 
  urgency            Urgency?
  purpose            String
  unitId             String?
  unit               Unit?             @relation("UnitRequisitions", fields: [unitId], references: [id])
  departmentId       String
  department         Department        @relation("DepartmentRequisitions", fields: [departmentId], references: [id])
  roomNo             String?
  deptApproverId     String?
  deptApprover       User?             @relation("DeptApprover", fields: [deptApproverId], references: [id], map: "requisition_deptApprover_fkey")
  itdApproverId      String?
  itdApprover        User?             @relation("ITDApprover", fields: [itdApproverId], references: [id], map: "requisition_itdApprover_fkey")
  status             RequisitionStatus @default(PENDING_DEPT_APPROVAL)
  declineReason      String? // Mandatory if declined
  approvalSignatures Json? // Digital signatures from Approval Managers
  issuedById         String?           // Added: Stores officer who issued it
  issuedBy           User?             @relation("IssuedRequisitions", fields: [issuedById], references: [id]) // New relation
  issuedAt           DateTime?         // Added: When it was issued
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  deletedAt          DateTime?

  stockIssued StockIssued[] @relation("RequisitionStockIssued")

  @@index([staffId])
  @@index([status])
  @@map("requisitions")
}

model StockReceived {
  id               String    @id @default(uuid())
  lpoReference     String 
  voucherNumber    String 
  lpoDate          DateTime
  itItemId         String
  itItem           ITItem    @relation("ITItemStockReceived", fields: [itItemId], references: [id])
  quantityReceived Int
  supplierId       String
  supplier         Supplier  @relation("SupplierStockReceived", fields: [supplierId], references: [id])
  warrantyPeriod   Int 
  receivedById     String
  receivedBy       User      @relation("UserStockReceived", fields: [receivedById], references: [id])
  dateReceived     DateTime
  remarks          String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  inventories Inventory[] @relation("InventoryStockReceived")
  stockBatch  StockBatch? @relation("StockReceivedStockBatch")

  @@index([lpoReference])
  @@index([voucherNumber])
  @@index([itItemId])
  @@index([supplierId])
  @@map("stock_received")
  @@unique([lpoReference, voucherNumber, itItemId])
}

model Stock {
  id              String    @id @default(uuid())
  itItemId        String    @unique
  itItem          ITItem    @relation("ITItemStock", fields: [itItemId], references: [id])
  quantityInStock Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  version         Int       @default(1) @map("version")

  @@index([itItemId])
  @@index([quantityInStock])
  @@index([itItemId, quantityInStock])
  @@map("stocks")
}

model StockIssued {
  id               String      @id @default(uuid())
  requisitionId    String
  requisition      Requisition @relation("RequisitionStockIssued", fields: [requisitionId], references: [id])
  stockBatchId     String
  stockBatch       StockBatch  @relation("StockBatchStockIssued", fields: [stockBatchId], references: [id], onDelete: Cascade)
  itItemId         String
  itItem           ITItem      @relation("ITItemStockIssued", fields: [itItemId], references: [id])
  quantityIssued   Int 
  requestDate      DateTime
  issuedById       String
  issuedBy         User        @relation("UserStockIssued", fields: [issuedById], references: [id])
  issueDate        DateTime
  disbursementNote String? 
  remarks          String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  deletedAt        DateTime?

  @@index([requisitionId])
  @@index([itItemId])
  @@index([issuedById])
  @@index([stockBatchId])
  @@index([requestDate])
  @@index([requisitionId, stockBatchId])
  @@map("stock_issued")
  @@unique([requisitionId, itItemId])
}

model MaintenanceTicket {
  id                     String     @id @default(uuid())
  ticketId               String     @unique // e.g., "TKT-001"
  assetId                String
  inventory              Inventory  @relation("InventoryMaintenanceTicket", fields: [assetId], references: [id])
  technicianReceivedById String
  technicianReceived     User       @relation("TechnicianReceived", fields: [technicianReceivedById], references: [id])
  receivedAt             DateTime   @default(now()) // Date and time the machine was received
  userId                 String
  user                   User       @relation("UserMaintenanceTickets", fields: [userId], references: [id])
  issueType              IssueType
  unitId                 String?
  unit                   Unit?      @relation("UnitMaintenanceTickets", fields: [unitId], references: [id])
  departmentId           String
  department             Department @relation("DepartmentMaintenanceTickets", fields: [departmentId], references: [id])
  description            String
  priority               Priority
  actionTaken            String? // e.g., Repair, Update, Replacement, etc.
  technicianReturnedById String?
  technicianReturned     User?      @relation("TechnicianReturned", fields: [technicianReturnedById], references: [id])
  dateLogged             DateTime   @default(now())
  dateResolved           DateTime?
  auditedBy              User?      @relation("AuditedBy", fields: [auditedById], references: [id])
  auditedById            String?
  auditDate              DateTime?
  remarks                String?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  deletedAt              DateTime?

  @@index([assetId])
  @@index([technicianReceivedById])
  @@index([priority])
  @@index([auditedById])
  @@index([departmentId])
  @@index([departmentId, unitId])
  @@index([dateLogged])
  @@index([priority, dateLogged])
  @@map("maintenance_tickets")
}

// ========================
// Transactional Stock Tracking
// ========================
model StockBatch {
  id              String        @id @default(uuid())
  stockReceived   StockReceived @relation("StockReceivedStockBatch", fields: [stockReceivedId], references: [id])
  stockReceivedId String        @unique
  quantity        Int
  warrantyPeriod  Int
  expiryDate      DateTime?
  deletedAt       DateTime?

  stockIssued StockIssued[] @relation("StockBatchStockIssued")

  @@index([stockReceivedId])
  @@map("stock_batches")
}
